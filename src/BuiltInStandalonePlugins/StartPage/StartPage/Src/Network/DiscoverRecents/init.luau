local l_script_FirstAncestor_0 = script:FindFirstAncestor("StartPage");
local v1 = require(l_script_FirstAncestor_0.Src.SharedFlags.getFFlagLuaStartPageFetchUniverseDataInLua)();
local _ = require(l_script_FirstAncestor_0.Src.Types);
local v3 = require(l_script_FirstAncestor_0.Src.Network.DiscoverAutogeneratedIcons);
local v4 = require(l_script_FirstAncestor_0.Src.Network.DiscoverTeamCreatePresence);
local v5 = require(l_script_FirstAncestor_0.Src.Network.DiscoverAgeRecommendations);
local v6 = require(l_script_FirstAncestor_0.Src.Network.DiscoverUniverseData);
local l_StartPageManager_0 = require(l_script_FirstAncestor_0.Src.Util.Services).StartPageManager;
local v8 = require(l_script_FirstAncestor_0.Src.Network.GameCache);
local function v25(v9, _, v11) --[[ Line: 36 ]] --[[ Name: DiscoverRecents ]]
    -- upvalues: l_StartPageManager_0 (copy), v1 (copy), v6 (copy), v8 (copy), v3 (copy), v4 (copy), v5 (copy)
    local v12 = l_StartPageManager_0:getRecentAPIGamesFromRegistry();
    local v13 = {};
    local v14 = (if v9 and v9.search then v9.search else ""):lower();
    if v9.getRecentAPIGames then
        local v15 = {};
        for _, v17 in v12 do
            local v18 = v17.Name:lower();
            if string.find(v18, v14) then
                local v19 = tonumber(v17.Id);
                assert(v19, "IDs returned from StartPageManager must be numeric");
                if v1 then
                    table.insert(v13, {
                        Id = v19, 
                        LastViewed = v17.LastViewed
                    });
                else
                    local v20 = tonumber(v17.RootPlaceId);
                    assert(v20, "IDs returned from StartPageManager must be numeric");
                    table.insert(v13, {
                        Name = v17.Name, 
                        Id = v19, 
                        RootPlaceId = v20, 
                        Updated = v17.Updated, 
                        CreatorName = v17.CreatorName, 
                        PrivacyType = v17.PrivacyType, 
                        LastViewed = v17.LastViewed
                    });
                end;
                table.insert(v15, v19);
            end;
        end;
        if v1 then
            if #v13 > 0 then
                local l_v15_0 = v15 --[[ copy: 7 -> 16 ]];
                v6(v13):andThen(function() --[[ Line: 78 ]]
                    -- upvalues: v8 (ref), v11 (copy), v13 (copy), v3 (ref), l_v15_0 (copy), v4 (ref), v5 (ref)
                    v8:upsertItemsForList(v11, 0, v13);
                    v8:setTargetCount(v11, #v13);
                    v3(l_v15_0, v11);
                    v4(l_v15_0);
                    v5(l_v15_0);
                end);
            end;
        else
            v8:upsertItemsForList(v11, 0, v13);
            v8:setTargetCount(v11, #v13);
            v3(v15, v11);
            v4(v15);
            v5(v15);
        end;
    end;
    if v9.getRecentLocalFiles then
        local v22 = l_StartPageManager_0:getLocalGamesFromRegistry();
        for v23 = #v22, 1, -1 do
            local v24 = v22[v23].Name:lower();
            if not string.find(v24, v14) then
                table.remove(v22, v23);
            end;
        end;
        v8:upsertItemsForList(v11, 0, v22);
        v8:setTargetCount(v11, #v13 + #v22);
    end;
end;
return function(v26, v27, v28) --[[ Line: 112 ]]
    -- upvalues: v25 (copy)
    task.defer(function() --[[ Line: 115 ]]
        -- upvalues: v25 (ref), v26 (copy), v27 (copy), v28 (copy)
        v25(v26, v27, v28);
    end);
end;