local l_script_FirstAncestor_0 = script:FindFirstAncestor("StartPage");
local v1 = require(l_script_FirstAncestor_0.Src.SharedFlags.getFIntDebugLuaStartPageLogging)();
local v2 = require(l_script_FirstAncestor_0.Src.SharedFlags.getFFlagLuaStartPageTeamCreateStatus)();
local v3 = require(l_script_FirstAncestor_0.Packages.Framework);
local v4 = require(l_script_FirstAncestor_0.Packages.Dash);
local l_collectArray_0 = v4.collectArray;
local l_map_0 = v4.map;
local _ = require(l_script_FirstAncestor_0.Src.Types);
local v8 = require(l_script_FirstAncestor_0.Src.Models.ApiArrayResponseGameTemplateModel);
local v9 = require(l_script_FirstAncestor_0.Src.Models.SearchUniversesResponse);
local v10 = require(l_script_FirstAncestor_0.Src.Network.Urls);
local l_Networking_0 = require(l_script_FirstAncestor_0.Src.Util.Services).Networking;
local v12 = require(l_script_FirstAncestor_0.Src.Util.createResponseValidator);
local l_Url_0 = v3.RobloxAPI.Url;
local v14 = l_Networking_0.new({
    isInternal = true, 
    loggingLevel = v1
});
local v15 = require(l_script_FirstAncestor_0.Src.Network.DiscoverPlaces);
local v16 = require(l_script_FirstAncestor_0.Src.Network.DiscoverAutogeneratedIcons);
local v17 = require(l_script_FirstAncestor_0.Src.Network.DiscoverPlaceholderIcons);
local v18 = require(l_script_FirstAncestor_0.Src.Network.DiscoverTeamCreatePresence);
local v19 = require(l_script_FirstAncestor_0.Src.Network.DiscoverAgeRecommendations);
local v20 = require(l_script_FirstAncestor_0.Src.Network.DiscoverTeamCreateStatus);
local _ = require(l_script_FirstAncestor_0.Src.Util.Telemetry.TelemetryContext);
local v22 = require(l_script_FirstAncestor_0.Src.Util.Telemetry.StartPageTelemetryEvent);
local v23 = require(l_script_FirstAncestor_0.Src.Network.GameCache);
local function v26(v24) --[[ Line: 53 ]] --[[ Name: generateContextStrFromQuery ]]
    if not v24 then
        return "";
    else
        local v25 = {
            v24.creatorType
        };
        if v24.isTemplates then
            table.insert(v25, "templates");
            table.insert(v25, v24.search or "All");
        else
            table.insert(v25, "experiences");
            if v24.search and v24.search ~= "" then
                table.insert(v25, "search");
            end;
        end;
        if v24.isPublic then
            table.insert(v25, "public");
        end;
        if v24.isArchived then
            table.insert(v25, "archived");
        end;
        return string.lower(table.concat(v25, "_"));
    end;
end;
local v27 = v12(v8.validate);
local v28 = v12(v9.validate);
return function(v29, v30, v31, v32) --[[ Line: 84 ]] --[[ Name: DiscoverExperiences ]]
    -- upvalues: l_Url_0 (copy), v10 (copy), v14 (copy), v27 (copy), l_collectArray_0 (copy), v28 (copy), v22 (copy), v26 (copy), l_map_0 (copy), v23 (copy), v15 (copy), v17 (copy), v16 (copy), v18 (copy), v19 (copy), v2 (copy), v20 (copy)
    local v33 = os.clock();
    local v34 = l_Url_0.new();
    local v35 = nil;
    if v29.isTemplates then
        if v30 ~= 0 then
            warn((("Tried to load template page %*"):format(v30)));
            return;
        else
            local v36 = v34.composeUrl(v10.TEMPLATES_SEARCH_URL.Prefix, v10.TEMPLATES_SEARCH_URL.Url(), v29);
            v35 = v14:parseJson(v14:get(v36)):andThen(function(v37) --[[ Line: 107 ]]
                -- upvalues: v27 (ref), l_collectArray_0 (ref), v29 (copy)
                local v38 = v27(v37);
                local v41 = l_collectArray_0(v38.data, function(_, v40) --[[ Line: 110 ]]
                    -- upvalues: v29 (ref)
                    if not v40.universe or not v40.universe.name or not v40.universe.id or not v40.universe.rootPlaceId then
                        return nil;
                    elseif v29.search == "All" or v40.gameTemplateType == v29.search then
                        return {
                            Name = v40.universe.name, 
                            Id = v40.universe.id, 
                            GameTemplateType = v40.gameTemplateType, 
                            RootPlaceId = v40.universe.rootPlaceId
                        };
                    else
                        return nil;
                    end;
                end);
                return {
                    games = v41, 
                    targetResults = #v41
                };
            end);
        end;
    else
        local v42 = v34.composeUrl(v10.EXPERIENCES_SEARCH_URL.Prefix, v10.EXPERIENCES_SEARCH_URL.Url(), v29) .. ("&PageIndex=%*"):format(v30);
        v35 = v14:parseJson(v14:get(v42)):andThen(function(v43) --[[ Line: 142 ]]
            -- upvalues: v28 (ref), l_collectArray_0 (ref)
            local v44 = v28(v43);
            local v48 = l_collectArray_0(v44.data, function(_, v46) --[[ Line: 145 ]]
                if not v46.name or not v46.id or not v46.rootPlaceId then
                    return nil;
                else
                    local l_privacyType_0 = v46.privacyType;
                    if l_privacyType_0 and l_privacyType_0 ~= "Public" and l_privacyType_0 ~= "Private" and l_privacyType_0 ~= "Draft" then
                        error((("Invalid value for privacyType: \"%*\""):format(l_privacyType_0)));
                    end;
                    return {
                        IsGame = true, 
                        Name = v46.name, 
                        CreatorName = v46.creatorName, 
                        CreatorTargetId = v46.creatorTargetId, 
                        Type = "Experience", 
                        Description = v46.description, 
                        Created = v46.created, 
                        Updated = v46.updated, 
                        PrivacyType = l_privacyType_0, 
                        Id = v46.id, 
                        RootPlaceId = v46.rootPlaceId
                    };
                end;
            end);
            return {
                games = v48, 
                targetResults = v44.totalResults or #v48
            };
        end);
    end;
    v35:andThen(function(v49) --[[ Line: 177 ]]
        -- upvalues: v32 (copy), v22 (ref), v33 (copy), v26 (ref), v29 (copy), l_map_0 (ref), v23 (ref), v31 (copy), v30 (copy), v15 (ref), v17 (ref), v16 (ref), v18 (ref), v19 (ref), v2 (ref), v20 (ref)
        local l_games_0 = v49.games;
        local l_targetResults_0 = v49.targetResults;
        if v32 ~= nil then
            local v52 = os.clock();
            v32:log(v22, {
                telemetryType = "performance", 
                telemetrySubtype = "search_load", 
                measurementName = "discover_experiences", 
                timeElapsedMilliseconds = math.round((v52 - v33) * 1000), 
                context = v26(v29)
            });
        end;
        local v54 = l_map_0(l_games_0, function(v53) --[[ Line: 193 ]]
            assert(not v53.IsPlaceholder, "Data returned from network should not be a placeholder sentinel value");
            assert(v53.Id, "Experience should have a value for Id");
            return v53.Id;
        end);
        v23:setItemsForPage(v31, v30, l_games_0);
        v23:setTargetCount(v31, l_targetResults_0);
        v15(v54);
        if v29.isTemplates then
            v17(v54, v31);
            return;
        else
            v16(v54, v31);
            v18(v54);
            v19(v54);
            if v2 then
                v20(v54);
            end;
            return;
        end;
    end):catch(function(v55) --[[ Line: 216 ]]
        warn((("DiscoverExperiences experienced an error: %*"):format(v55)));
    end);
end;