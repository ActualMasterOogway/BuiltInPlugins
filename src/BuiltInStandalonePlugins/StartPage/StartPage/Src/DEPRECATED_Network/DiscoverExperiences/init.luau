local l_script_FirstAncestor_0 = script:FindFirstAncestor("StartPage");
local v1 = require(l_script_FirstAncestor_0.Src.SharedFlags.getFIntDebugLuaStartPageLogging)();
local v2 = require(l_script_FirstAncestor_0.Packages.Framework);
local _ = require(l_script_FirstAncestor_0.Src.Types);
local v4 = require(l_script_FirstAncestor_0.Src.Models.ApiArrayResponseGameTemplateModel);
local v5 = require(l_script_FirstAncestor_0.Src.Models.SearchUniversesResponse);
local v6 = require(l_script_FirstAncestor_0.Src.Network.Urls);
local l_Networking_0 = require(l_script_FirstAncestor_0.Src.Util.Services).Networking;
local v8 = require(l_script_FirstAncestor_0.Src.Util.createResponseValidator);
local l_Url_0 = v2.RobloxAPI.Url;
local v10 = l_Networking_0.new({
    isInternal = true, 
    loggingLevel = v1
});
local l_collectArray_0 = require(l_script_FirstAncestor_0.Src.Util.TypedDash).collectArray;
local v12 = require(l_script_FirstAncestor_0.Src.DEPRECATED_Network.DiscoverPlaces);
local v13 = require(l_script_FirstAncestor_0.Src.DEPRECATED_Network.DiscoverAutogeneratedIcons);
local v14 = require(l_script_FirstAncestor_0.Src.DEPRECATED_Network.DiscoverPlaceholderIcons);
local v15 = require(l_script_FirstAncestor_0.Src.DEPRECATED_Network.DiscoverTeamCreatePresence);
local v16 = require(l_script_FirstAncestor_0.Src.DEPRECATED_Network.DiscoverAgeRecommendations);
local _ = require(l_script_FirstAncestor_0.Src.Util.Telemetry.TelemetryContext);
local v18 = require(l_script_FirstAncestor_0.Src.Util.Telemetry.StartPageTelemetryEvent);
local function v21(v19) --[[ Line: 49 ]] --[[ Name: generateContextStrFromQuery ]]
    if not v19 then
        return "";
    else
        local v20 = {
            v19.creatorType
        };
        if v19.isTemplates then
            table.insert(v20, "templates");
            table.insert(v20, v19.search or "All");
        else
            table.insert(v20, "experiences");
            if v19.search and v19.search ~= "" then
                table.insert(v20, "search");
            end;
        end;
        if v19.isPublic then
            table.insert(v20, "public");
        end;
        if v19.isArchived then
            table.insert(v20, "archived");
        end;
        return string.lower(table.concat(v20, "_"));
    end;
end;
return function(v22, v23, v24, v25, v26) --[[ Line: 77 ]] --[[ Name: DiscoverExperiences ]]
    -- upvalues: l_Url_0 (copy), v6 (copy), v10 (copy), v8 (copy), v4 (copy), l_collectArray_0 (copy), v5 (copy), v12 (copy), v14 (copy), v13 (copy), v15 (copy), v16 (copy), v18 (copy), v21 (copy)
    local v27 = os.clock();
    local v28 = l_Url_0.new();
    local v29 = nil;
    if v22.isTemplates then
        local v30 = v28.composeUrl(v6.TEMPLATES_SEARCH_URL.Prefix, v6.TEMPLATES_SEARCH_URL.Url(), v22);
        v29 = v10:parseJson(v10:get(v30)):andThen(v8(v4.validate)):andThen(function(v31) --[[ Line: 95 ]]
            -- upvalues: l_collectArray_0 (ref), v22 (copy)
            if not v31.data then
                return {
                    games = {}, 
                    targetResults = 0
                };
            else
                local v34 = l_collectArray_0(v31.data, function(_, v33) --[[ Line: 103 ]]
                    -- upvalues: v22 (ref)
                    if not v33.universe or not v33.universe.name or not v33.universe.id or not v33.universe.rootPlaceId then
                        return nil;
                    elseif v22.search == "All" or v33.gameTemplateType == v22.search then
                        return {
                            Name = v33.universe.name, 
                            Id = v33.universe.id, 
                            GameTemplateType = v33.gameTemplateType, 
                            RootPlaceId = v33.universe.rootPlaceId
                        };
                    else
                        return nil;
                    end;
                end);
                return {
                    games = v34, 
                    targetResults = #v34
                };
            end;
        end);
    else
        local v35 = v28.composeUrl(v6.EXPERIENCES_SEARCH_URL.Prefix, v6.EXPERIENCES_SEARCH_URL.Url(), v22);
        v29 = v10:parseJson(v10:get(v35)):andThen(v8(v5.validate)):andThen(function(v36) --[[ Line: 135 ]]
            -- upvalues: l_collectArray_0 (ref)
            if not v36.data then
                return {
                    games = {}, 
                    targetResults = 0
                };
            else
                local v40 = l_collectArray_0(v36.data, function(_, v38) --[[ Line: 143 ]]
                    if not v38.name or not v38.id or not v38.rootPlaceId then
                        return nil;
                    else
                        local l_privacyType_0 = v38.privacyType;
                        if l_privacyType_0 and l_privacyType_0 ~= "Public" and l_privacyType_0 ~= "Private" and l_privacyType_0 ~= "Draft" then
                            error((("Invalid value for privacyType: \"%*\""):format(l_privacyType_0)));
                        end;
                        return {
                            IsGame = true, 
                            Name = v38.name, 
                            CreatorName = v38.creatorName, 
                            CreatorTargetId = v38.creatorTargetId, 
                            Type = "Experience", 
                            Description = v38.description, 
                            Created = v38.created, 
                            Updated = v38.updated, 
                            PrivacyType = l_privacyType_0, 
                            Id = v38.id, 
                            RootPlaceId = v38.rootPlaceId
                        };
                    end;
                end);
                return {
                    games = v40, 
                    targetResults = v36.totalResults or #v40
                };
            end;
        end);
    end;
    local v50 = v29:andThen(function(v41) --[[ Line: 181 ]]
        -- upvalues: v25 (copy), v24 (copy), v23 (copy)
        v25(function(v42) --[[ Line: 182 ]]
            -- upvalues: v24 (ref), v41 (copy), v23 (ref)
            local v43 = table.clone(v42);
            if not v43[v24] then
                v43[v24] = {
                    targetResults = (v42[v24] or v41).targetResults, 
                    pages = {}
                };
            end;
            v43[v24].pages[v23] = v41.games or {};
            return v43;
        end);
        local v44 = {};
        for _, v46 in v41.games do
            assert(not v46.IsPlaceholder, "Data returned from network should not be a placeholder sentinel value");
            assert(v46.Id, "Experience should have a value for Id");
            table.insert(v44, v46.Id);
        end;
        return {
            gameIds = v44, 
            setter = function(v47) --[[ Line: 204 ]] --[[ Name: setter ]]
                -- upvalues: v25 (ref), v24 (ref), v23 (ref)
                v25(function(v48) --[[ Line: 205 ]]
                    -- upvalues: v47 (copy), v24 (ref), v23 (ref)
                    local v49 = table.clone(v48);
                    v47(v49[v24].pages[v23]);
                    return v49;
                end);
            end
        };
    end):andThen(v12);
    (if v22.isTemplates then v50:andThen(v14):catch(function(v51) --[[ Line: 216 ]]
        warn((("DiscoverPlaceHolderIcons experienced an error: %*"):format(v51)));
    end) else v50:andThen(function(v52) --[[ Line: 220 ]]
        -- upvalues: v13 (ref), v15 (ref), v16 (ref)
        v13(v52);
        v15(v52);
        v16(v52);
    end):catch(function(v53) --[[ Line: 225 ]]
        warn((("DiscoverExperiences experienced an error: %*"):format(v53)));
    end)):andThen(function() --[[ Line: 230 ]]
        -- upvalues: v26 (copy), v18 (ref), v27 (copy), v21 (ref), v22 (copy)
        if v26 ~= nil then
            local v54 = os.clock();
            v26:log(v18, {
                telemetryType = "performance", 
                telemetrySubtype = "search_load", 
                measurementName = "discover_experiences", 
                timeElapsedMilliseconds = math.round((v54 - v27) * 1000), 
                context = v21(v22)
            });
        end;
    end):catch(warn);
end;