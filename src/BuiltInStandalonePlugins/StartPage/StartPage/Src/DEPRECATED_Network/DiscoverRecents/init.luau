local l_script_FirstAncestor_0 = script:FindFirstAncestor("StartPage");
local _ = require(l_script_FirstAncestor_0.Src.Types);
local v2 = require(l_script_FirstAncestor_0.Src.DEPRECATED_Network.DiscoverAutogeneratedIcons);
local v3 = require(l_script_FirstAncestor_0.Src.DEPRECATED_Network.DiscoverTeamCreatePresence);
local v4 = require(l_script_FirstAncestor_0.Src.DEPRECATED_Network.DiscoverAgeRecommendations);
local l_StartPageManager_0 = require(l_script_FirstAncestor_0.Src.Util.Services).StartPageManager;
local v6 = game:DefineFastFlag("FixDateTimeCrashOnNil", false);
local function v23(v7, v8, v9) --[[ Line: 32 ]] --[[ Name: mergeSortGames ]]
    -- upvalues: v6 (copy)
    local v10 = {};
    local v11 = 1;
    local v12 = 1;
    local v13 = if v9 and v9.search then v9.search else "";
    while v12 <= #v8 or v11 <= #v7 do
        local v14 = v13:lower();
        if v11 <= #v7 then
            local v15 = v7[v11];
            assert(not v15.IsPlaceholder, "Data returned from network should not be a placeholder sentinel value");
            local v16 = v15.Name:lower();
            if not string.find(v16, v14) then
                v11 = v11 + 1;
                continue;
            end;
        end;
        if v12 <= #v8 then
            local v17 = v8[v12];
            assert(not v17.IsPlaceholder, "Data returned from network should not be a placeholder sentinel value");
            local v18 = v17.Name:lower();
            if not string.find(v18, v14) then
                v12 = v12 + 1;
                continue;
            end;
        end;
        if v12 <= #v8 and v11 <= #v7 then
            local v19 = v8[v12];
            local v20 = v7[v11];
            assert(not v19.IsPlaceholder, "Data returned from network should not be a placeholder sentinel value");
            assert(not v20.IsPlaceholder, "Data returned from network should not be a placeholder sentinel value");
            assert(v19.LastViewed, "Local game file must have an updated date value");
            assert(v20.LastViewed, "Recent game must have an updated date value");
            local v21 = DateTime.fromIsoDate(v19.LastViewed);
            if v6 and not v21 then
                v12 = v12 + 1;
            else
                local v22 = DateTime.fromIsoDate(v20.LastViewed);
                if v6 and not v22 then
                    v11 = v11 + 1;
                else
                    assert(v21, "LastViewed of local games must be converted to DateTime");
                    assert(v22, "LastViewed of recent games must be converted ot DateTime");
                    if v21.UnixTimestampMillis > v22.UnixTimestampMillis then
                        table.insert(v10, v19);
                        v12 = v12 + 1;
                    else
                        table.insert(v10, v20);
                        v11 = v11 + 1;
                    end;
                end;
            end;
        elseif v12 <= #v8 then
            table.insert(v10, v8[v12]);
            v12 = v12 + 1;
        elseif v11 <= #v7 then
            table.insert(v10, v7[v11]);
            v11 = v11 + 1;
        end;
    end;
    return v10;
end;
return function(v24, v25, v26, v27) --[[ Line: 123 ]] --[[ Name: DiscoverRecents ]]
    -- upvalues: l_StartPageManager_0 (copy), v2 (copy), v3 (copy), v4 (copy), v23 (copy)
    if v25 > 1 then
        return;
    else
        local v28 = {};
        if v24.getRecentAPIGames then
            local v29 = l_StartPageManager_0:getRecentAPIGamesFromRegistry();
            local v30 = {};
            for _, v32 in v29 do
                local v33 = tonumber(v32.Id);
                local v34 = tonumber(v32.RootPlaceId);
                assert(v33 and v34, "IDs returned from StartPageManager must be numeric");
                table.insert(v28, {
                    Name = v32.Name, 
                    Id = v33, 
                    RootPlaceId = v34, 
                    Updated = v32.Updated, 
                    CreatorName = v32.CreatorName, 
                    PrivacyType = v32.PrivacyType, 
                    LastViewed = v32.LastViewed
                });
                table.insert(v30, v33);
            end;
            local v36 = {
                gameIds = v30, 
                setter = function(v35) --[[ Line: 160 ]] --[[ Name: setter ]]
                    -- upvalues: v28 (ref)
                    v35(v28);
                end
            };
            v2(v36);
            v3(v36);
            v4(v36);
        end;
        if v24.getRecentLocalFiles then
            local v37 = l_StartPageManager_0:getLocalGamesFromRegistry();
            v28 = v23(v37, v28, v24);
        end;
        v27(function(_) --[[ Line: 175 ]]
            -- upvalues: v26 (copy), v28 (ref), v25 (copy)
            local v39 = {
                [v26] = {
                    targetResults = #v28, 
                    pages = {}
                }
            };
            v39[v26].targetResults = #v28;
            v39[v26].pages[v25] = v28;
            return v39;
        end);
        return;
    end;
end;